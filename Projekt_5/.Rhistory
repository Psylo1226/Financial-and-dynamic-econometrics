# Wyniki
results <- list()
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
test <- test_granger(data, lags, hc_type = "HC3")
results[[paste(phi, k, rep)]] <- test
}
}
}
# Analiza wyników (rozmiar testu, moc itp.)
results
View(data)
results_df <- data.frame(
phi = rep(c(0.3, 0.6), each = 5),
k = rep(seq(1.0, 2.0, 0.25), 2),
p_value_granger = c(0.045, 0.08, 0.12, 0.2, 0.3, 0.01, 0.05, 0.09, 0.15, 0.22)
)
# Wykres
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(linewidth = 1) +
geom_point(linewidth = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Wykres
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
results_length <- data.frame(
n1 = c(100, 200, 300, 400),
n2 = c(100, 100, 100, 100),
p_value_granger = c(0.04, 0.08, 0.12, 0.2),
reject_h0 = c(TRUE, TRUE, FALSE, FALSE)
)
# Wykres
ggplot(results_length, aes(x = n1, y = p_value_granger, fill = reject_h0)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Wpływ długości danych (n1) na p-value testu Grangera",
x = "Długość danych (n1)",
y = "p-value testu Grangera",
fill = "Odrzucenie H0"
) +
theme_minimal()
# Wymagane pakiety
library(vars)
library(ggplot2)
library(dplyr)
# Funkcja do symulacji danych VAR z różnymi wariancjami składników losowych
simulate_var <- function(n1, n2, phi, sigma, k) {
n <- n1 + n2
errors <- matrix(rnorm(n * 2, mean = 0, sd = sigma), ncol = 2)
errors[(n1 + 1):n, ] <- errors[(n1 + 1):n, ] * k  # Zwiększenie wariancji w drugiej części
data <- matrix(0, nrow = n, ncol = 2)
for (t in 2:n) {
data[t, 1] <- phi * data[t - 1, 1] + errors[t, 1]
data[t, 2] <- phi * data[t - 1, 2] + errors[t, 2]
}
colnames(data) <- c("V1", "V2")
return(as.data.frame(data))
}
# Funkcja do przeprowadzania testu Grangera
test_granger <- function(data, lags, hc_type = "HC3") {
var_model <- VAR(data, p = lags, type = "const")
granger_test <- causality(var_model, cause = "V1")
p_value <- granger_test$Granger$p.value
return(p_value)
}
# Parametry symulacji
phi_values <- c(0.3, 0.6)  # Autokorelacja
k_values <- seq(1.0, 2.0, by = 0.25)  # Wzrost wariancji
n1 <- 100  # Liczba obserwacji przed zmianą wariancji
n2 <- 100  # Liczba obserwacji po zmianie wariancji
lags <- 1  # Opóźnienia w modelu VAR
sigma <- 1  # Początkowe odchylenie standardowe
reps <- 50  # Liczba powtórzeń symulacji
# Pętla symulacyjna
results <- data.frame()
set.seed(123)  # Ustawienie ziarna losowego
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
p_value <- test_granger(data, lags, hc_type = "HC3")
results <- rbind(results, data.frame(phi = phi, k = k, rep = rep, p_value = p_value))
}
}
}
# Dodanie informacji o odrzuceniu H0 (p-value < 0.05)
results <- results %>%
mutate(reject_h0 = ifelse(p_value < 0.05, TRUE, FALSE))
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Obliczenie średniego p-value dla każdej kombinacji phi i k
p_value_summary <- results %>%
group_by(phi, k) %>%
summarize(mean_p_value = mean(p_value), .groups = "drop")
# Wykres
ggplot(p_value_summary, aes(x = phi, y = mean_p_value, group = k, color = as.factor(k))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ autokorelacji (phi) na średnie p-value",
x = "Autokorelacja (phi)",
y = "Średnie p-value",
color = "Wzrost wariancji (k)"
) +
theme_minimal()
ggplot(results, aes(x = k, y = p_value, color = as.factor(phi))) +
geom_jitter(width = 0.1, alpha = 0.5) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
library(knitr)
library(kableExtra)
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
# Tabela podsumowująca odsetek odrzuceń H0
summary_table <- summary_results %>%
pivot_wider(names_from = phi, values_from = reject_rate) %>%
rename(`Phi = 0.3` = `0.3`, `Phi = 0.6` = `0.6`)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
library(vars)
library(ggplot2)
library(dplyr)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Wymagane pakiety
library(vars)
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
n1 <- 500  # Liczba obserwacji przed zmianą wariancji
n2 <- 500
results <- data.frame()
set.seed(123)  # Ustawienie ziarna losowego
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
p_value <- test_granger(data, lags, hc_type = "HC3")
results <- rbind(results, data.frame(phi = phi, k = k, rep = rep, p_value = p_value))
}
}
}
results <- results %>%
mutate(reject_h0 = ifelse(p_value < 0.05, TRUE, FALSE))
###Wizualizacje
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
dane <- read.csv2("nvda_us_d.csv")
getwd()
setwd(C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_5)
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_5")
dane <- read.csv2("nvda_us_d.csv")
dane <- read.csv2("nvda_us_d.csv")
View(dane)
dane <- read.csv("nvda_us_d.csv")
dane <- dane[c(1,5)]
library(zoo)
# Funkcja tworząca indeksy dla okien 2-letnich
okna <- function(data, size = 500) {
start <- seq(1, nrow(data) - size)
lapply(start, function(i) data[i:(i + size - 1)])
}
# Lista okien
windows <- okna(nvda_data[!is.na(log_return)], size = 500)
# Funkcja tworząca indeksy dla okien 2-letnich
okna <- function(data, size = 500) {
start <- seq(1, nrow(data) - size)
lapply(start, function(i) data[i:(i + size - 1)])
}
# Lista okien
windows <- okna(dane[!is.na(log_return)], size = 500)
dane$Data <- as.Date(dane$Data)
batch <- dane[dane$Data <= as.Date("2016-01-01")]
batch <- dane[dane$Data < as.Date("2016-01-01"),]
View(batch)
library(rugarch)
spec_garch <- ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
)
spec_gjr <- ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
)
spec_egarch <- ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
)
specs <- c(
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
)
)
dane[,2]
symulacje <- function(df) {
dt <- df[,2]
results <- matrix(NA, ncol = 3, nrow = 6)
results[,1] <- c("garch_norm","garch_std","gjr_norm","gjr_std","egarch_norm","egarch_std")
for (spec in specs) {
fit <- ugarchfit(spec = spec, data = dt)
fc <- ugarchforecast(fit, n.ahead = 1)
results[,2] = quantile(forecast, probs = 0.01)
results[,3] = quantile(forecast, probs = 0.05)
}
return(results)
}
wynik <- symulacje(batch)
symulacje <- function(df) {
dt <- df[,2]
results <- matrix(NA, ncol = 3, nrow = 6)
results[,1] <- c("garch_norm","garch_std","gjr_norm","gjr_std","egarch_norm","egarch_std")
for (spec in specs) {
fit <- ugarchfit(spec = spec, data = dt)
fc <- ugarchforecast(fit, n.ahead = 1)
results[,2] = quantile(fc, probs = 0.01)
results[,3] = quantile(fc, probs = 0.05)
}
return(results)
}
wynik <- symulacje(batch)
wynik
View(wynik)
View(specs)
f1 <- ugarchfit(spec = ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
), data = batch)
forecast <- ugarchforecast(f1, n.ahead = 1)
forecast
f1 <- ugarchfit(spec = ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
), data = batch)
forecast <- ugarchforecast(f1, n.ahead = 1)
forecast
quantile(forecast, probs = 0.01)
f1 <- ugarchfit(spec = ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
), data = batch)
forecast <- ugarchforecast(f1, n.ahead = 1)
quantile(forecast, probs = 0.01)
symulacje <- function(df) {
dt <- df[,2]
results <- matrix(NA, ncol = 3, nrow = 6)
results[,1] <- c("garch_norm","garch_std","gjr_norm","gjr_std","egarch_norm","egarch_std")
i = 1
for (spec in specs) {
fit <- ugarchfit(spec = spec, data = dt)
fc <- ugarchforecast(fit, n.ahead = 1)
results[i,2] = quantile(fc, probs = 0.01)
results[i,3] = quantile(fc, probs = 0.05)
i= i + 1
}
return(results)
}
wynik <- symulacje(batch)
modele <- function(df) {
dt <- df[,2]
results <- matrix(NA, ncol = 3, nrow = 6)
results[,1] <- c("garch_norm","garch_std","gjr_norm","gjr_std","egarch_norm","egarch_std")
i = 1
for (spec in specs) {
fit <- ugarchfit(spec = spec, data = dt)
fc <- ugarchforecast(fit, n.ahead = 1)
results[i,2] = quantile(fc, probs = 0.01)
results[i,3] = quantile(fc, probs = 0.05)
i= i + 1
}
return(results)
}
nrow(batch)
end:nrow(dane)
nrow(dane)
(nrow(dane))-end
nrow(dane)-end)
nrow(dane)-end
nrow(dane)
end
end <- nrow(batch)
nrow(dane)-end
wyniki <- c()
symulacje <- function() {
end <- nrow(batch)
for (i in 1:(nrow(dane)-end)) {
df <- dane[i:(i+end),]
wyniki[i] <- modele(df)
}
}
modele(batch)
wyniki <- list()
symulacje <- function() {
end <- nrow(batch)
for (i in 1:(nrow(dane)-end)) {
df <- dane[i:(i+end),]
wyniki[i] <- modele(df)
}
}
View(wyniki)
wyniki <- list()
symulacje <- function() {
end <- nrow(batch)
for (i in 1:(nrow(dane)-end)) {
df <- dane[i:(i+end),]
print(i)
wyniki[i] <- modele(df)
}
}
specs <- c(
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(1, 1)),
distribution.model = "std"
)
)
symulacje <- function() {
end <- nrow(batch)
for (i in 1:(nrow(dane)-end)) {
df <- dane[i:(i+end),]
print(i)
wyniki[i] <- modele(df)
}
}
wyniki <- list()
symulacje <- function() {
end <- nrow(batch)
for (i in 1:(nrow(dane)-end)) {
df <- dane[i:(i+end),]
wyniki[i] <- modele(df)
}
}
symulacje()
#Specyfikacje modeli Garch
specs <- c(
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "sGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "gjrGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "norm"
),
ugarchspec(
variance.model = list(model = "eGARCH"),
mean.model = list(armaOrder = c(0, 0)),
distribution.model = "std"
)
)
symulacje()

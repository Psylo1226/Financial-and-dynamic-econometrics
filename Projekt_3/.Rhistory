library(forecast)
library(tseries)
library(MASS)
library(ggplot2)
library(tidyr)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
n_reps <- 1000
results <- vector("list", n_reps)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
for (rep in 1:n_reps) {
rep_results <- list()
for (N in n_values) {
estimates <- matrix(NA, nrow = N, ncol = 3)
stderrs <- matrix(NA, nrow = N, ncol = 3)
residual_acf <- matrix(NA, nrow = N, ncol = 20)
i <- 1
for (AR in ar_values) {
xt1 = arima.sim(list(order=c(1,0,0), ar=AR), n=N)
xt3 = Arima(xt1, order = c(3,1,0))
estimates[i, ] <- xt3$coef[1:3]
stderrs[i, ] <- sqrt(diag(xt3$var.coef))[1:3]
residual_acf[i, ] <- acf(residuals(xt3), plot = FALSE)$acf[2:21]
i <- i + 1
}
rep_results[[paste0("N_", N)]] <- list(
estimates = estimates,
stderrs = stderrs,
residual_acf = residual_acf
)
}
results[[rep]] <- rep_results
}
combine_estimates <- function(results, N) {
do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
}
summarize_estimates <- function(estimates_all, true_params) {
mean_estimates <- colMeans(estimates_all, na.rm = TRUE)
bias <- mean_estimates - true_params
sd_estimates <- apply(estimates_all, 2, sd, na.rm = TRUE)
data.frame(
Parameter = paste0("AR", 1:3),
Mean = mean_estimates,
Bias = bias,
SD = sd_estimates
)
}
analyze_all <- function(results, true_params) {
summary_list <- list()
for (N in names(results[[1]])) {
estimates_all <- combine_estimates(results, N)
summary_list[[N]] <- summarize_estimates(estimates_all, true_params)
}
return(summary_list)
}
display_summary <- function(summary_results) {
for (N in names(summary_results)) {
cat(paste0("Długość danych: ", N, "\n"))
print(summary_results[[N]])
cat("\n")
}
}
combine_estimates_for_N <- function(results, N) {
estimates_all <- do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
colnames(estimates_all) <- paste0("AR", 1:3)
return(estimates_all)
}
prepare_data_for_plot <- function(estimates_all) {
estimates_df <- data.frame(estimates_all)
estimates_df_long <- estimates_df %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
return(estimates_df_long)
}
plot_histograms <- function(estimates_df_long) {
ggplot(estimates_df_long, aes(x = value)) +
geom_histogram(bins = 30, color = "black", fill = "skyblue", alpha = 0.7) +
facet_wrap(~variable, scales = "free", ncol = 1) +
theme_minimal() +
labs(
title = "Rozkład estymatorów parametrów AR(3) przy danych z AR(1)",
x = "Wartość estymatora",
y = "Częstość"
)
}
# Podsumowanie wyników
true_params <- c(.1, .5, .9)  # Prawdziwe parametry AR(1)
summary_results <- analyze_all(results, true_params)
# Wyświetlanie podsumowania
display_summary(summary_results)
# Analiza dla konkretnej długości danych (N=1000)
N_focus <- "N_1000"
estimates_all <- combine_estimates_for_N(results, N_focus)
# Przygotowanie danych do wykresów
estimates_df_long <- prepare_data_for_plot(estimates_all)
# Tworzenie histogramów
plot_histograms(estimates_df_long)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
for (rep in 1:n_reps) {
rep_results <- list()
for (N in n_values) {
estimates <- matrix(NA, nrow = N, ncol = 3)
stderrs <- matrix(NA, nrow = N, ncol = 3)
residual_acf <- matrix(NA, nrow = N, ncol = 20)
i <- 1
for (AR in ar_values) {
xt1 = arima.sim(list(order=c(1,0,0), ar=AR), n=N)
xt3 = Arima(xt1, order = c(3,0,0))
estimates[i, ] <- xt3$coef[1:3]
stderrs[i, ] <- sqrt(diag(xt3$var.coef))[1:3]
residual_acf[i, ] <- acf(residuals(xt3), plot = FALSE)$acf[2:21]
i <- i + 1
}
rep_results[[paste0("N_", N)]] <- list(
estimates = estimates,
stderrs = stderrs,
residual_acf = residual_acf
)
}
results[[rep]] <- rep_results
}
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
n_reps <- 1000
results <- vector("list", n_reps)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
for (rep in 1:n_reps) {
rep_results <- list()
for (N in n_values) {
estimates <- matrix(NA, nrow = N, ncol = 3)
stderrs <- matrix(NA, nrow = N, ncol = 3)
residual_acf <- matrix(NA, nrow = N, ncol = 20)
i <- 1
for (AR in ar_values) {
xt1 = arima.sim(list(order=c(1,0,0), ar=AR), n=N)
xt3 = Arima(xt1, order = c(3,0,0))
estimates[i, ] <- xt3$coef[1:3]
stderrs[i, ] <- sqrt(diag(xt3$var.coef))[1:3]
residual_acf[i, ] <- acf(residuals(xt3), plot = FALSE)$acf[2:21]
i <- i + 1
}
rep_results[[paste0("N_", N)]] <- list(
estimates = estimates,
stderrs = stderrs,
residual_acf = residual_acf
)
}
results[[rep]] <- rep_results
}
combine_estimates <- function(results, N) {
do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
}
summarize_estimates <- function(estimates_all, true_params) {
mean_estimates <- colMeans(estimates_all, na.rm = TRUE)
bias <- mean_estimates - true_params
sd_estimates <- apply(estimates_all, 2, sd, na.rm = TRUE)
data.frame(
Parameter = paste0("AR", 1:3),
Mean = mean_estimates,
Bias = bias,
SD = sd_estimates
)
}
analyze_all <- function(results, true_params) {
summary_list <- list()
for (N in names(results[[1]])) {
estimates_all <- combine_estimates(results, N)
summary_list[[N]] <- summarize_estimates(estimates_all, true_params)
}
return(summary_list)
}
display_summary <- function(summary_results) {
for (N in names(summary_results)) {
cat(paste0("Długość danych: ", N, "\n"))
print(summary_results[[N]])
cat("\n")
}
}
combine_estimates_for_N <- function(results, N) {
estimates_all <- do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
colnames(estimates_all) <- paste0("AR", 1:3)
return(estimates_all)
}
prepare_data_for_plot <- function(estimates_all) {
estimates_df <- data.frame(estimates_all)
estimates_df_long <- estimates_df %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
return(estimates_df_long)
}
plot_histograms <- function(estimates_df_long) {
ggplot(estimates_df_long, aes(x = value)) +
geom_histogram(bins = 30, color = "black", fill = "skyblue", alpha = 0.7) +
facet_wrap(~variable, scales = "free", ncol = 1) +
theme_minimal() +
labs(
title = "Rozkład estymatorów parametrów AR(3) przy danych z AR(1)",
x = "Wartość estymatora",
y = "Częstość"
)
}
# Podsumowanie wyników
true_params <- c(.1, .5, .9)  # Prawdziwe parametry AR(1)
summary_results <- analyze_all(results, true_params)
# Wyświetlanie podsumowania
display_summary(summary_results)
# Analiza dla konkretnej długości danych (N=1000)
N_focus <- "N_1000"
estimates_all <- combine_estimates_for_N(results, N_focus)
# Przygotowanie danych do wykresów
estimates_df_long <- prepare_data_for_plot(estimates_all)
# Tworzenie histogramów
plot_histograms(estimates_df_long)
library(forecast)
library(tseries)
library(MASS)
library(ggplot2)
library(tidyr)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
n_reps <- 1000
results <- vector("list", n_reps)
n_values <- c(50, 100, 1000)
ar_values <- c(.1, .5, .9)
for (rep in 1:n_reps) {
rep_results <- list()
for (N in n_values) {
estimates <- matrix(NA, nrow = N, ncol = 3)
stderrs <- matrix(NA, nrow = N, ncol = 3)
residual_acf <- matrix(NA, nrow = N, ncol = 20)
i <- 1
for (AR in ar_values) {
xt1 = arima.sim(list(order=c(1,0,0), ar=AR), n=N)
xt3 = Arima(xt1, order = c(3,0,0))
estimates[i, ] <- xt3$coef[1:3]
stderrs[i, ] <- sqrt(diag(xt3$var.coef))[1:3]
residual_acf[i, ] <- acf(residuals(xt3), plot = FALSE)$acf[2:21]
i <- i + 1
}
rep_results[[paste0("N_", N)]] <- list(
estimates = estimates,
stderrs = stderrs,
residual_acf = residual_acf
)
}
results[[rep]] <- rep_results
}
combine_estimates <- function(results, N) {
do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
}
summarize_estimates <- function(estimates_all, true_params) {
mean_estimates <- colMeans(estimates_all, na.rm = TRUE)
bias <- mean_estimates - true_params
sd_estimates <- apply(estimates_all, 2, sd, na.rm = TRUE)
data.frame(
Parameter = paste0("AR", 1:3),
Mean = mean_estimates,
Bias = bias,
SD = sd_estimates
)
}
analyze_all <- function(results, true_params) {
summary_list <- list()
for (N in names(results[[1]])) {
estimates_all <- combine_estimates(results, N)
summary_list[[N]] <- summarize_estimates(estimates_all, true_params)
}
return(summary_list)
}
display_summary <- function(summary_results) {
for (N in names(summary_results)) {
cat(paste0("Długość danych: ", N, "\n"))
print(summary_results[[N]])
cat("\n")
}
}
combine_estimates_for_N <- function(results, N) {
estimates_all <- do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
colnames(estimates_all) <- paste0("AR", 1:3)
return(estimates_all)
}
prepare_data_for_plot <- function(estimates_all) {
estimates_df <- data.frame(estimates_all)
estimates_df_long <- estimates_df %>%
pivot_longer(cols = everything(), names_to = "variable", values_to = "value")
return(estimates_df_long)
}
plot_histograms <- function(estimates_df_long) {
ggplot(estimates_df_long, aes(x = value)) +
geom_histogram(bins = 30, color = "black", fill = "skyblue", alpha = 0.7) +
facet_wrap(~variable, scales = "free", ncol = 1) +
theme_minimal() +
labs(
title = "Rozkład estymatorów parametrów AR(3) przy danych z AR(1)",
x = "Wartość estymatora",
y = "Częstość"
)
}
# Podsumowanie wyników
true_params <- c(.1, .5, .9)  # Prawdziwe parametry AR(1)
summary_results <- analyze_all(results, true_params)
# Wyświetlanie podsumowania
display_summary(summary_results)
# Analiza dla konkretnej długości danych (N=1000)
N_focus <- "N_50"
estimates_all <- combine_estimates_for_N(results, N_focus)
# Przygotowanie danych do wykresów
estimates_df_long <- prepare_data_for_plot(estimates_all)
# Tworzenie histogramów N_50
plot_histograms(estimates_df_long)
summarize_estimates <- function(estimates_all, true_params) {
mean_estimates <- colMeans(estimates_all, na.rm = TRUE)
bias <- mean_estimates - true_params
sd_estimates <- apply(estimates_all, 2, sd, na.rm = TRUE)
data.frame(
Parameter = paste0("ϕ", 1:3),
Mean = mean_estimates,
Bias = bias,
SD = sd_estimates
)
}
# Podsumowanie wyników
true_params <- c(.1, .5, .9)  # Prawdziwe parametry AR(1)
summary_results <- analyze_all(results, true_params)
# Wyświetlanie podsumowania
display_summary(summary_results)
# Analiza dla konkretnej długości danych (N=1000)
N_focus <- "N_100"
estimates_all <- combine_estimates_for_N(results, N_focus)
# Przygotowanie danych do wykresów
estimates_df_long <- prepare_data_for_plot(estimates_all)
# Tworzenie histogramów N_50
plot_histograms(estimates_df_long)
combine_estimates_for_N <- function(results, N) {
estimates_all <- do.call(rbind, lapply(results, function(rep) rep[[N]]$estimates))
colnames(estimates_all) <- paste0("ϕ", 1:3)
return(estimates_all)
}
# Podsumowanie wyników
true_params <- c(.1, .5, .9)  # Prawdziwe parametry AR(1)
summary_results <- analyze_all(results, true_params)
# Wyświetlanie podsumowania
display_summary(summary_results)
# Analiza dla konkretnej długości danych (N=1000)
N_focus <- "N_1000"
estimates_all <- combine_estimates_for_N(results, N_focus)
# Przygotowanie danych do wykresów
estimates_df_long <- prepare_data_for_plot(estimates_all)
# Tworzenie histogramów N_50
plot_histograms(estimates_df_long)

# Wyniki
results <- list()
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
test <- test_granger(data, lags, hc_type = "HC3")
results[[paste(phi, k, rep)]] <- test
}
}
}
library(vars)
library(sandwich)
library(lmtest)
library(ggplot2)
simulate_var <- function(n1, n2, phi, sigma, k) {
library(MASS) # Dla generowania wielowymiarowego rozkładu normalnego
# Parametry VAR(1)
A <- matrix(c(phi, 0.2, 0.2, phi), nrow = 2) # Macierz autoregresji
sigma_mat <- diag(c(sigma, sigma))          # Macierz kowariancji
# Pierwsza część danych: stała wariancja
eps1 <- mvrnorm(n1, mu = c(0, 0), Sigma = sigma_mat)
data1 <- matrix(0, n1, 2)
for (t in 2:n1) {
data1[t, ] <- A %*% data1[t - 1, ] + eps1[t, ]
}
# Druga część danych: zwiększona wariancja
sigma_mat2 <- diag(c(k * sigma, k * sigma)) # Zmieniona macierz kowariancji
eps2 <- mvrnorm(n2, mu = c(0, 0), Sigma = sigma_mat2)
data2 <- matrix(0, n2, 2)
data2[1, ] <- data1[n1, ] # Kontynuacja z poprzedniego końca
for (t in 2:n2) {
data2[t, ] <- A %*% data2[t - 1, ] + eps2[t, ]
}
# Połączenie danych
data <- rbind(data1, data2)
# Dodaj nazwy kolumn
colnames(data) <- c("V1", "V2")
return(data)
}
test_granger <- function(data, lags, hc_type) {
library(vars)
# Dopasowanie modelu VAR
var_model <- VAR(data, p = lags, type = "const")
# Test Grangera
granger_test <- causality(var_model, cause = "V1")
return(list(granger = granger_test))
}
# Parametry symulacji
n1 <- 100
n2 <- 100
phi_values <- c(0.2, 0.5, 0.8) # Siła autokorelacji
k_values <- c(1.5, 2, 3)       # Wzrost wariancji
lags <- 1
sigma <- 1
reps <- 100
# Wyniki
results <- list()
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
test <- test_granger(data, lags, hc_type = "HC3")
results[[paste(phi, k, rep)]] <- test
}
}
}
# Analiza wyników (rozmiar testu, moc itp.)
results
View(data)
results_df <- data.frame(
phi = rep(c(0.3, 0.6), each = 5),
k = rep(seq(1.0, 2.0, 0.25), 2),
p_value_granger = c(0.045, 0.08, 0.12, 0.2, 0.3, 0.01, 0.05, 0.09, 0.15, 0.22)
)
# Wykres
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(linewidth = 1) +
geom_point(linewidth = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Wykres
ggplot(results_df, aes(x = k, y = p_value_granger, color = as.factor(phi))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
results_length <- data.frame(
n1 = c(100, 200, 300, 400),
n2 = c(100, 100, 100, 100),
p_value_granger = c(0.04, 0.08, 0.12, 0.2),
reject_h0 = c(TRUE, TRUE, FALSE, FALSE)
)
# Wykres
ggplot(results_length, aes(x = n1, y = p_value_granger, fill = reject_h0)) +
geom_bar(stat = "identity", position = "dodge") +
labs(
title = "Wpływ długości danych (n1) na p-value testu Grangera",
x = "Długość danych (n1)",
y = "p-value testu Grangera",
fill = "Odrzucenie H0"
) +
theme_minimal()
# Wymagane pakiety
library(vars)
library(ggplot2)
library(dplyr)
# Funkcja do symulacji danych VAR z różnymi wariancjami składników losowych
simulate_var <- function(n1, n2, phi, sigma, k) {
n <- n1 + n2
errors <- matrix(rnorm(n * 2, mean = 0, sd = sigma), ncol = 2)
errors[(n1 + 1):n, ] <- errors[(n1 + 1):n, ] * k  # Zwiększenie wariancji w drugiej części
data <- matrix(0, nrow = n, ncol = 2)
for (t in 2:n) {
data[t, 1] <- phi * data[t - 1, 1] + errors[t, 1]
data[t, 2] <- phi * data[t - 1, 2] + errors[t, 2]
}
colnames(data) <- c("V1", "V2")
return(as.data.frame(data))
}
# Funkcja do przeprowadzania testu Grangera
test_granger <- function(data, lags, hc_type = "HC3") {
var_model <- VAR(data, p = lags, type = "const")
granger_test <- causality(var_model, cause = "V1")
p_value <- granger_test$Granger$p.value
return(p_value)
}
# Parametry symulacji
phi_values <- c(0.3, 0.6)  # Autokorelacja
k_values <- seq(1.0, 2.0, by = 0.25)  # Wzrost wariancji
n1 <- 100  # Liczba obserwacji przed zmianą wariancji
n2 <- 100  # Liczba obserwacji po zmianie wariancji
lags <- 1  # Opóźnienia w modelu VAR
sigma <- 1  # Początkowe odchylenie standardowe
reps <- 50  # Liczba powtórzeń symulacji
# Pętla symulacyjna
results <- data.frame()
set.seed(123)  # Ustawienie ziarna losowego
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
p_value <- test_granger(data, lags, hc_type = "HC3")
results <- rbind(results, data.frame(phi = phi, k = k, rep = rep, p_value = p_value))
}
}
}
# Dodanie informacji o odrzuceniu H0 (p-value < 0.05)
results <- results %>%
mutate(reject_h0 = ifelse(p_value < 0.05, TRUE, FALSE))
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Obliczenie średniego p-value dla każdej kombinacji phi i k
p_value_summary <- results %>%
group_by(phi, k) %>%
summarize(mean_p_value = mean(p_value), .groups = "drop")
# Wykres
ggplot(p_value_summary, aes(x = phi, y = mean_p_value, group = k, color = as.factor(k))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ autokorelacji (phi) na średnie p-value",
x = "Autokorelacja (phi)",
y = "Średnie p-value",
color = "Wzrost wariancji (k)"
) +
theme_minimal()
ggplot(results, aes(x = k, y = p_value, color = as.factor(phi))) +
geom_jitter(width = 0.1, alpha = 0.5) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
library(knitr)
library(kableExtra)
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
# Tabela podsumowująca odsetek odrzuceń H0
summary_table <- summary_results %>%
pivot_wider(names_from = phi, values_from = reject_rate) %>%
rename(`Phi = 0.3` = `0.3`, `Phi = 0.6` = `0.6`)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
library(vars)
library(ggplot2)
library(dplyr)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Wymagane pakiety
library(vars)
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
n1 <- 500  # Liczba obserwacji przed zmianą wariancji
n2 <- 500
results <- data.frame()
set.seed(123)  # Ustawienie ziarna losowego
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
p_value <- test_granger(data, lags, hc_type = "HC3")
results <- rbind(results, data.frame(phi = phi, k = k, rep = rep, p_value = p_value))
}
}
}
results <- results %>%
mutate(reject_h0 = ifelse(p_value < 0.05, TRUE, FALSE))
###Wizualizacje
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
training.1600000.processed.noemoticon <- read.csv("C:/Users/staw2/OneDrive/Pulpit/training.1600000.processed.noemoticon.csv", header=FALSE, sep=";")
View(training.1600000.processed.noemoticon)
training.1600000.processed.noemoticon <- read.csv("C:/Users/staw2/OneDrive/Pulpit/training.1600000.processed.noemoticon.csv", header=FALSE)
View(training.1600000.processed.noemoticon)
11b <- read.csv("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_6/11b.txt")
llb <- read.csv("11b.txt")
getwd()
("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_6")
llb <- read.csv("11b.txt")
getwd()
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_6")
getwd()
llb <- read.csv("11b.txt")
llb <- read.csv("11b.txt")
att <- read.csv("att.txt")
tpe <- read.csv("tpe.txt")
View(att)
View(llb)
llb <- llb[llb$X.TIME. != 90000]
llb <- llb[llb$X.TIME. != 90000,]
llb <- llb[llb$X.TIME. != 170000,]
att <- att[att$X.TIME. != 90000,]
att <- att[att$X.TIME. != 170000,]
tpe <- tpe[tpe$X.TIME. != 90000,]
tpe <- tpe[tpe$X.TIME. != 170000,]
llb <- llb[llb$X.TIME. != 90000,c(3,4,8)]
att <- att[att$X.TIME. != 90000,c(3,4,8)]
tpe <- tpe[tpe$X.TIME. != 90000,c(3,4,8)]
library(dplyr)
merged <- llb %>%
inner_join(att, by = c("X.DATE.","X.TIME.")) %>%
inner_join(tpe, by = c("X.DATE.","X.TIME."))
View(merged)
colnames(merged,c("Date","Time","11b","ATT","TPE"))
colnames(merged) <- c("Date","Time","11b","ATT","TPE")
colnames(merged) <- c("Date","Time","11B","ATT","TPE")
diff(merged$11B)
diff(merged$`11B`)
diff(log(merged))
merged[,c(3:5)]
log(merged[,c(3:5)])
diff(log(merged[,c(3:5)]))
stopy5 <- apply(merged, 2, function(x) diff(log(x)))
merged
stopy5
stopy5 <- apply(merged[,c(3:5)], 2, function(x) diff(log(x)))
stopy5
cor(stopy5, method = "spearman")
merged$Time/100
merged$Time <- merged$Time/100
min10 <- seq(from=905,to=1645,by=10)
min10
merged[merged$Time %in% min,c(3:5)]
merged[merged$Time in min,c(3:5)]
merged[merged$Time %in% min10,c(3:5)]
stopy10 <- apply(merged[merged$Time %in% min10,c(3:5)], 2, function(x) diff(log(x)))
c5 <- cor(stopy5, method = "spearman")
c10 <- cor(stopy10, method = "spearman")
c5
c10
min15 <- seq(from=905,to=1645,by=15)
min20 <- seq(from=905,to=1645,by=20)
min25 <- seq(from=905,to=1645,by=25)
min30 <- seq(from=905,to=1645,by=30)
min15
stopy10 <- apply(merged[merged$Time %in% min10,c(3:5)], 2, function(x) diff(log(x)))
stopy15 <- apply(merged[merged$Time %in% min15,c(3:5)], 2, function(x) diff(log(x)))
stopy20 <- apply(merged[merged$Time %in% min20,c(3:5)], 2, function(x) diff(log(x)))
stopy25 <- apply(merged[merged$Time %in% min25,c(3:5)], 2, function(x) diff(log(x)))
stopy30 <- apply(merged[merged$Time %in% min30,c(3:5)], 2, function(x) diff(log(x)))
c5 <- cor(stopy5, method = "spearman")
c10 <- cor(stopy10, method = "spearman")
c15 <- cor(stopy10, method = "spearman")
c20 <- cor(stopy10, method = "spearman")
c25 <- cor(stopy10, method = "spearman")
c30 <- cor(stopy10, method = "spearman")
c30
c5 <- cor(stopy5, method = "spearman")
c10 <- cor(stopy10, method = "spearman")
c15 <- cor(stopy15, method = "spearman")
c20 <- cor(stopy20, method = "spearman")
c25 <- cor(stopy25, method = "spearman")
c30 <- cor(stopy30, method = "spearman")
c30
merged
seq(from=5,to=30,by=5)
stopy5
stopy <- data.frame()
merged
stopy <- list()
merged %>%
group_by(Date) %>%                                  # Grupowanie po dacie
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>% # Liczenie stóp zwrotu
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
library(dplyr)
merged %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
stopy <- list()
for (i in seq(from=5,to=30,by=5)) {
minutes = seq(from=905,to=1645,by=i)
stopy[[i/5]] <- merged %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
}
stopy
stopy <- list()
for (i in seq(from=5,to=30,by=5)) {
minutes = seq(from=905,to=1645,by=i)
stopy[[i/5]] <- merged[merged$Time %in% minutes,] %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
}
stopy <- list()
for (i in seq(from=5,to=30,by=5)) {
minutes = seq(from=905,to=1645,by=i)
stopy[[i/5]] <- merged[merged$Time %in% minutes,] %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.))),
.groups = "drop")  %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
}
warnings()
stopy
stopy <- list()
for (i in seq(from=5,to=30,by=5)) {
minutes = seq(from=905,to=1645,by=i)
stopy[[i/5]] <- merged[merged$Time %in% minutes,] %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.))),
.groups = "drop")  %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
stopy[[i/5]] <- stopy[[i/5]][-1]
}
stopy
cor(stopy[[1]], method = "spearman")
c5
llb <- read.csv("11b.txt")
att <- read.csv("att.txt")
tpe <- read.csv("tpe.txt")
llb <- llb[llb$X.TIME. != 90000,c(3,4,8)]
att <- att[att$X.TIME. != 90000,c(3,4,8)]
tpe <- tpe[tpe$X.TIME. != 90000,c(3,4,8)]
merged <- llb %>%
inner_join(att, by = c("X.DATE.","X.TIME.")) %>%
inner_join(tpe, by = c("X.DATE.","X.TIME."))
merged$Time <- merged$Time/100
llb <- read.csv("11b.txt")
att <- read.csv("att.txt")
tpe <- read.csv("tpe.txt")
llb <- llb[llb$X.TIME. != 90000,c(3,4,8)]
att <- att[att$X.TIME. != 90000,c(3,4,8)]
tpe <- tpe[tpe$X.TIME. != 90000,c(3,4,8)]
merged <- llb %>%
inner_join(att, by = c("X.DATE.","X.TIME.")) %>%
inner_join(tpe, by = c("X.DATE.","X.TIME."))
merged
colnames(merged) <- c("Date","Time","11B","ATT","TPE")
merged$Time <- merged$Time/100
merged
stopy <- list()
for (i in seq(from=5,to=30,by=5)) {
minutes = seq(from=905,to=1645,by=i)
stopy[[i/5]] <- merged[merged$Time %in% minutes,] %>%
group_by(Date) %>%
summarise(across(c(`11B`, ATT, TPE), ~ diff(log(.))),
.groups = "drop")  %>%
ungroup() %>%
summarise(across(everything(), ~ unlist(.)))
stopy[[i/5]] <- stopy[[i/5]][-1]
}
warnings()
stopy <- list()
for (i in seq(from = 5, to = 30, by = 5)) {
minutes <- seq(from = 905, to = 1645, by = i)
stopy[[i / 5]] <- merged[merged$Time %in% minutes, ] %>%
group_by(Date) %>%
reframe(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>%
ungroup()
}
stopy
c5 <- cor(stopy[[1]], method = "spearman")
c10 <- cor(stopy[[2]], method = "spearman")
c15 <- cor(stopy[[3]], method = "spearman")
c20 <- cor(stopy[[4]], method = "spearman")
c25 <- cor(stopy[[5]], method = "spearman")
c30 <- cor(stopy[[6]], method = "spearman")
c5
stopy <- list()
for (i in seq(from = 5, to = 30, by = 5)) {
minutes <- seq(from = 905, to = 1645, by = i)
stopy[[i / 5]] <- merged[merged$Time %in% minutes, ] %>%
group_by(Date) %>%
reframe(across(c(`11B`, ATT, TPE), ~ diff(log(.)))) %>%
ungroup()
stopy[[i / 5]] <- stopy[[i / 5]][-1]
}
stopy
c5 <- cor(stopy[[1]], method = "spearman")
c10 <- cor(stopy[[2]], method = "spearman")
c15 <- cor(stopy[[3]], method = "spearman")
c20 <- cor(stopy[[4]], method = "spearman")
c25 <- cor(stopy[[5]], method = "spearman")
c30 <- cor(stopy[[6]], method = "spearman")
c5
c30
stopy
c15
c25
c10
stopy[[2]]
stopy[[1]]

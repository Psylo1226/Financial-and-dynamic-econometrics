p_value_summary <- results %>%
group_by(phi, k) %>%
summarize(mean_p_value = mean(p_value), .groups = "drop")
# Wykres
ggplot(p_value_summary, aes(x = phi, y = mean_p_value, group = k, color = as.factor(k))) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ autokorelacji (phi) na średnie p-value",
x = "Autokorelacja (phi)",
y = "Średnie p-value",
color = "Wzrost wariancji (k)"
) +
theme_minimal()
ggplot(results, aes(x = k, y = p_value, color = as.factor(phi))) +
geom_jitter(width = 0.1, alpha = 0.5) +
geom_smooth(method = "loess", se = FALSE) +
labs(
title = "Wpływ wzrostu wariancji (k) na p-value testu Grangera",
x = "Wzrost wariancji (k)",
y = "p-value testu Grangera",
color = "Phi (autokorelacja)"
) +
theme_minimal()
library(knitr)
library(kableExtra)
install.packages("knitr")
install.packages("kableExtra")
library(knitr)
library(kableExtra)
# Tabela podsumowująca odsetek odrzuceń H0
summary_table <- summary_results %>%
pivot_wider(names_from = phi, values_from = reject_rate) %>%
rename(`Phi = 0.3` = `0.3`, `Phi = 0.6` = `0.6`)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
library(vars)
library(ggplot2)
library(dplyr)
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
# Wymagane pakiety
library(vars)
library(knitr)
library(kableExtra)
library(ggplot2)
library(dplyr)
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
n1 <- 500  # Liczba obserwacji przed zmianą wariancji
n2 <- 500
results <- data.frame()
set.seed(123)  # Ustawienie ziarna losowego
for (phi in phi_values) {
for (k in k_values) {
for (rep in 1:reps) {
data <- simulate_var(n1, n2, phi, sigma, k)
p_value <- test_granger(data, lags, hc_type = "HC3")
results <- rbind(results, data.frame(phi = phi, k = k, rep = rep, p_value = p_value))
}
}
}
results <- results %>%
mutate(reject_h0 = ifelse(p_value < 0.05, TRUE, FALSE))
###Wizualizacje
# Obliczenie średniego odsetka odrzuceń H0 dla każdej kombinacji phi i k
summary_results <- results %>%
group_by(phi, k) %>%
summarize(reject_rate = mean(reject_h0), .groups = "drop")
# Wykres
ggplot(summary_results, aes(x = k, y = reject_rate, color = as.factor(phi), group = phi)) +
geom_line(size = 1) +
geom_point(size = 3) +
labs(
title = "Wpływ wzrostu wariancji (k) na odsetek odrzuceń H0",
x = "Wzrost wariancji (k)",
y = "Odsetek odrzuceń H0",
color = "Phi (autokorelacja)"
) +
theme_minimal()
training.1600000.processed.noemoticon <- read.csv("C:/Users/staw2/OneDrive/Pulpit/training.1600000.processed.noemoticon.csv", header=FALSE, sep=";")
View(training.1600000.processed.noemoticon)
training.1600000.processed.noemoticon <- read.csv("C:/Users/staw2/OneDrive/Pulpit/training.1600000.processed.noemoticon.csv", header=FALSE)
View(training.1600000.processed.noemoticon)
library(dplyr)
library(reshape2)
library(ggplot2)
getwd()
setwd("C:\Users\staw2\OneDrive\Pulpit\EFiD\Financial-and-dynamic-econometrics\Projekt_7")
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_7")
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_7")
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_7")
setwd("C:/Users/staw2/OneDrive/Pulpit/EFiD/Financial-and-dynamic-econometrics/Projekt_7")
etwd()
getwd()
wig <- read.csv("wig20_d.csv")
View(wig)
dax <- read.csv("dax_d.csv")
cac <- read.csv("cac_d.csv")
moex <- read.csv("moex_d.csv")
wig <- read.csv("wig20_d.csv")
dax <- read.csv("dax_d.csv")
cac <- read.csv("cac_d.csv")
moex <- read.csv("moex_d.csv")
wig <- wig[,c(1,5)]
wig <- wig[,c(1,5)]
View(dax)
View(moex)
View(wig)
wig <- read.csv("wig20_d.csv")
dax <- read.csv("dax_d.csv")
cac <- read.csv("cac_d.csv")
moex <- read.csv("moex_d.csv")
wig <- wig[,c(1,5)]
dax <- dax[,c(1,5)]
cac <- cac[,c(1,5)]
moex <- moex[,c(1,5)]
merged <- wig |>
inner_join(dax, by = "Data") |>
inner_join(cac, by = "Data") |>
inner_join(moex, by = "Data")
View(merged)
colnames(merged) <- c("Data","WIG","DAX","CAC","MOEX")
zwroty <- merged %>%
dplyr::mutate(
across(
.cols = c(WIG, DAX, CAC, MOEX),
.fns = ~ c(NA, diff(log(.)))
)
)
View(zwroty)
zwroty <- zwroty[-1,]
cor(zwroty[,-1])
zwroty$Data <- as.Date(zwroty$Data)
z18_20 <- zwroty[zwroty$Data < as.Date(2020-03-01)]
View(z18_20)
zwroty[zwroty$Data < as.Date(2020-03-01)]
as.Date(2020-03-01)
as.Date("2020-03-01")
z18_20 <- zwroty[zwroty$Data < as.Date("2020-03-01")]
z18_20 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
zwroty[zwroty$Data <= as.Date("2020-30-06") & zwroty$Data >= as.Date("2020-01-01"),-1]
s.Date("2020-01-01")
as.Date("2020-01-01")
as.Date("2020-30-06")
zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-01-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-01-01"),-1]
z1 <- zwroty[zwroty$Data < as.Date("2020-01-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor(z1)
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
cor1
cor2
cor3
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-08-31") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-09-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor4
cor5
cor6
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-05-31") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-06-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor4
cor5
cor6
library(dplyr)
library(reshape2)
library(ggplot2)
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-02-31") & zwroty$Data >= as.Date("2022-02-24"),-1]
#Wojna na Ukrainie
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-02-28") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-06-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor4
cor5
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-03-30") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-06-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor5
#Wojna na Ukrainie
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-04-30") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-06-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor4
cor5
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-03-31") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-06-01"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor5
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-03-24") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-03-25"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor4
cor6
cor5
plot(merged$WIG,merged$Data)
plot(as.Date(merged$Data),merged$WIG)
plot(merged$Data,merged$WIG)
zwroty
wig <- read.csv("wig20_d.csv")
dax <- read.csv("dax_d.csv")
cac <- read.csv("cac_d.csv")
moex <- read.csv("moex_d.csv")
wig <- wig[,c(1,5)]
dax <- dax[,c(1,5)]
cac <- cac[,c(1,5)]
moex <- moex[,c(1,5)]
merged <- wig |>
inner_join(dax, by = "Data") |>
inner_join(cac, by = "Data") |>
inner_join(moex, by = "Data")
colnames(merged) <- c("Data","WIG","DAX","CAC","MOEX")
zwroty <- merged %>%
dplyr::mutate(
across(
.cols = c(WIG, DAX, CAC, MOEX),
.fns = ~ c(NA, diff(log(.)))
)
)
zwroty <- zwroty[-1,]
plot(zwroty$Data,zwroty$WIG)
plot(as.Date(zwroty$Data),zwroty$WIG)
zwroty$Data <- as.Date(zwroty$Data)
plot(zwroty$Data,zwroty$WIG)
library(tidyr)
wig <- read.csv("wig20_d.csv")
dax <- read.csv("dax_d.csv")
cac <- read.csv("cac_d.csv")
moex <- read.csv("moex_d.csv")
wig <- wig[,c(1,5)]
dax <- dax[,c(1,5)]
cac <- cac[,c(1,5)]
moex <- moex[,c(1,5)]
merged <- wig |>
inner_join(dax, by = "Data") |>
inner_join(cac, by = "Data") |>
inner_join(moex, by = "Data")
colnames(merged) <- c("Data","WIG","DAX","CAC","MOEX")
merged$Data <- as.Date(merged$Data)
zwroty <- merged %>%
dplyr::mutate(
across(
.cols = c(WIG, DAX, CAC, MOEX),
.fns = ~ c(NA, diff(log(.)))
)
)
zwroty <- zwroty[-1,]
plot(zwroty$Data,zwroty$WIG)
pivot_merged <- pivot_longer(merged, cols = -Data, names_to = "variable", values_to = "value")
ggplot(pivot_merged, aes(x = Data, y = value, color = variable)) +
geom_line() +
geom_point() +
labs(title = "Wartości w czasie", x = "Data", y = "Wartość") +
theme_minimal()
pivot_merged
pivot_merged <- pivot_longer(merged, cols = -Data, names_to = "indeks", values_to = "val")
ggplot(pivot_merged, aes(x = Data, y = val, color = indeks)) +
geom_line() +
geom_point() +
labs(title = "Wartości w czasie", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
pivot_merged <- pivot_longer(merged, cols = -Data, names_to = "Indeks", values_to = "val")
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-01-01")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
z1 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-03-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
cor1
cor2
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
pivot_zwroty <- pivot_longer(merged, cols = -Data, names_to = "Indeks", values_to = "val")
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
pivot_zwroty <- pivot_longer(zwroty, cols = -Data, names_to = "Indeks", values_to = "val")
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
z1 <- merged[merged$Data < as.Date("2020-03-01"),-1]
z2 <- merged[merged$Data <= as.Date("2020-06-30") & merged$Data >= as.Date("2020-03-01"),-1]
z3 <- merged[merged$Data <= as.Date("2021-12-31") & merged$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
cor1
cor2
z1 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-03-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_point() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-024")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
pivot_zwroty <- pivot_longer(zwroty, cols = -Data, names_to = "Indeks", values_to = "val")
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-024")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-024")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 1) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.5) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 1) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
zwroty <- merged %>%
dplyr::mutate(
across(
.cols = c(WIG, DAX, CAC, MOEX),
.fns = ~ c(NA, diff(log(.)))
)
)
zwroty
na.omit(zwroty)
zwroty <- na.omit(zwroty)
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()
z1 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-03-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
#Wojna na Ukrainie
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-03-24") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-03-25"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
z1 <- zwroty[zwroty$Data < as.Date("2020-01-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-01-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
z1 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-03-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
cor1 <- cor(z1)
cor2 <- cor(z2)
cor3 <- cor(z3)
cor2
z1 <- zwroty[zwroty$Data < as.Date("2020-03-01"),-1]
z2 <- zwroty[zwroty$Data <= as.Date("2020-06-30") & zwroty$Data >= as.Date("2020-03-01"),-1]
z3 <- zwroty[zwroty$Data <= as.Date("2021-12-31") & zwroty$Data >= as.Date("2020-07-01"),-1]
z1
cor1
y1 <- zwroty[zwroty$Data < as.Date("2022-02-24") & zwroty$Data >= as.Date("2021-01-01"),-1]
y2 <- zwroty[zwroty$Data <= as.Date("2022-03-24") & zwroty$Data >= as.Date("2022-02-24"),-1]
y3 <- zwroty[zwroty$Data <= as.Date("2024-12-31") & zwroty$Data >= as.Date("2022-03-25"),-1]
cor4 <- cor(y1)
cor5 <- cor(y2)
cor6 <- cor(y3)
cor5
View(cor4)
View(cor5)
View(cor5)
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Stopy zwrotu", x = "Data", y = "Wartość") +
theme_minimal()
library(dplyr)
library(reshape2)
library(ggplot2)
library(tidyr)
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Stopy zwrotu", x = "Data", y = "Wartość") +
theme_minimal()
ggplot(pivot_zwroty, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Stopy zwrotu", x = "Data", y = "Wartość") +
theme_minimal() + ylim(-0.1, 0.1)
View(cor6)
ggplot(pivot_merged, aes(x = Data, y = val, color = Indeks)) +
geom_line() +
geom_vline(xintercept = as.numeric(as.Date("2020-03-01")), linetype = "dashed", color = "black", linewidth = 0.6) +
geom_vline(xintercept = as.numeric(as.Date("2022-02-24")), linetype = "dashed", color = "black", linewidth = 0.6) +
labs(title = "Wartości zamknięcia", x = "Data", y = "Wartość") +
theme_minimal()

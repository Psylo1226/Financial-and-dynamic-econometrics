install.packages("dplyr")
install.packages("tidyr")
TimeUse <- read.csv2("C:/Users/staw2/OneDrive/Pulpit/TimeUse.csv")
View(TimeUse)
TimeUse <- read.csv("C:/Users/staw2/OneDrive/Pulpit/TimeUse.csv")
View(TimeUse)
dane <- read.csv("izo_d")
dane <- read.csv("izo_d.csv")
getwd()
setwd("C:\Users\staw2\OneDrive\Pulpit")
setwd("C:/Users/staw2/OneDrive/Pulpit")
dane <- read.csv("izo_d.csv")
library("tidyverse")
library("moments")
View(dane)
library("moments")
izo <- read.csv("izo_d.csv")
indeksy <- izo[,c(1,5)]
dane <- indeksy %>% map_df(rev)
View(dane)
szereg_z <- c()
szereg_l <- c()
for (i in head(dane,-1)) {
szereg_z[i] <- st_z(dane[i],dane[i+1])
szereg_l[i] <- st_l(dane[i],dane[i+1])
}
#Stopa zwykła:
st_z <- function(a,b) {
return((a-b)/b)
}
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
szereg_z <- c()
szereg_l <- c()
for (i in head(dane,-1)) {
szereg_z[i] <- st_z(dane[i],dane[i+1])
szereg_l[i] <- st_l(dane[i],dane[i+1])
}
head(dane,-1)
dane[1]
dane[2,1]
dane[2,2]
szereg_z <- c()
szereg_l <- c()
for (i in head(dane,-1)) {
szereg_z[i] <- st_z(dane[i,2],dane[i+1,2])
szereg_l[i] <- st_l(dane[i,2],dane[i+1,2])
}
szereg_z <- c()
szereg_l <- c()
for (i in (nrow(dane)-1)) {
szereg_z[i] <- st_z(dane[i,2],dane[i+1,2])
szereg_l[i] <- st_l(dane[i,2],dane[i+1,2])
}
View(szereg_l)
View(szereg_l)
nrow(dane)-1
st_z(dane[1,2],dane[2,2])
szereg_z <- c()
szereg_l <- c()
for (i in (nrow(dane)-1)) {
szereg_z[i] <- as.numeric(st_z(dane[i,2],dane[i+1,2]))
szereg_l[i] <- as.numeric(st_l(dane[i,2],dane[i+1,2]) )
}
as.numeric(st_z(dane[2,2],dane[1,2]))
szereg_z <- c()
szereg_l <- c()
for (i in (nrow(dane)-1)) {
szereg_z <- c(szereg_z,as.numeric(st_z(dane[i,2],dane[i+1,2])))
szereg_l <- c(szereg_l,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
szereg_z <- c()
szereg_l <- c()
for (i in (nrow(dane)-1)) {
szereg_z <- c(szereg_z,as.numeric(st_z(dane[i,2],dane[i+1,2])))
szereg_l <- c(szereg_l,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
szereg_z <- c(0)
szereg_l <- c(1)
for (i in (nrow(dane)-1)) {
szereg_z <- c(szereg_z,as.numeric(st_z(dane[i,2],dane[i+1,2])))
szereg_l <- c(szereg_l,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
(nrow(dane)-1)
szereg_z <- c()
szereg_l <- c()
for (i in 1:(nrow(dane)-1)) {
szereg_z <- c(szereg_z,as.numeric(st_z(dane[i,2],dane[i+1,2])))
szereg_l <- c(szereg_l,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
print(szereg_l)
View(izo)
head(izo,-4)
head(dane,-4)
head(dane,4)
tail(dane,4)
tail(dane,-4)
head(tail(dane,-4))
tail(tail(dane,-4))
tail(dane,-4)
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
prognoza <- head(indeksy,4)
dane <- tail(indeksy,-4)
adf.test(szereg)
library("aTSA")
adf.test(szereg)
dane <- tail(indeksy,-4)
szereg <- c()
for (i in 1:(nrow(dane)-1)) {
szereg <- c(szereg_l,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
adf.test(szereg)
library("tseries")
adf.test(szereg)
library("forecast")
model <- auto.arima(szereg)
summary(model)
res <- residuals(model)
acf(res)
Box.test(residuals, type = "Ljung-Box")
Box.test(res, type = "Ljung-Box")
summary(model)
jarque.bera.test(res)
plot(res)
qqnorm(res)
adf.test(szereg)
summary(model)
model <- arima(szereg, order = c(1, 0, 2))
summary(model)
model <- arima(szereg, order = c(2, 0, 1))
summary(model)
model <- arima(szereg, order = c(2, 0, 3))
summary(model)
getwd()
setwd("C:/Users/staw2/OneDrive/Pulpit/Projekt 2/Financial-and-dynamic-econometrics/Projekt_2")
getwd()
forecast(model)
forecast(model,4)
forecast(model,4)$mean
prognoza
indeksy[4,2]
forecast(model,4)$mean
st_z(indeksy[1,2],indeksy[2,2])
View(indeksy)
dane
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
library("tidyverse")
library("moments")
library("tseries")
library("forecast")
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
prognoza_stopy <- head(indeksy,4)
dane <- tail(indeksy,-4)
stopy <- c()
for (i in 1:(nrow(dane)-1)) {
stopy <- c(stopy,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
ceny <- log(dane)
dane
ceny <- log(dane[2])
ceny
adf.test(stopy)
model <- auto.arima(stopy)
summary(model)
res <- residuals(model)
Box.test(res, type = "Ljung-Box")
#P-value większe od 0.05 -> brak aurokorelacji
jarque.bera.test(res)
#P-value mniejsze od 0.05 -> reszty nie mają rozkładu normalnego
qqnorm(res)
forecast(model,4)$mean
head(indeksy,4)
log(head(indeksy,4)[2])
ceny
View(ceny)
View(dane)
plot(stopy)
plot(ceny)
plot(ceny,dane[1])
plot(ceny,as.Date(dane[1]))
dane[1]
plot(stopy)
stopy
model <- auto.arima(ceny)
forecast(model,4)$mean
summary(model)
log(dane[nrow(dane), 2])
last <- log(dane[nrow(dane), 2])
c(last)
last <- c(log(dane[nrow(dane), 2]))
for (i in 1:4) {
next_log_price <- log_price_forecast[i] + log_return_forecast[i]
log_price_forecast <- c(log_price_forecast, next_log_price)
}
for (i in 1:4) {
next_log_price <- last[i] + log_return_forecast[i]
last <- c(last, next_log_price)
}
for (i in 1:4) {
next_log_price <- last[i] + last[i]
last <- c(last, next_log_price)
}
prognoza_zwrotow <- forecast(model,4)$mean
last <- c(log(dane[nrow(dane), 2]))
for (i in 1:4) {
next_log <- last[i] + prognoza_zwrotow[i]
last <- c(last, next_log)
}
last
for (i in 1:1) {
next_log <- last[i] + prognoza_zwrotow[i]
last <- c(last, next_log)
}
prognoza_zwrotow
prognoza_zwrotow[1]
last[1]
for (i in 1:4) {
next_log <- last[1] + prognoza_zwrotow[i]
last <- c(last, next_log)
}
for (i in 1:4) {
next_log <- last[1] + prognoza_zwrotow[1]
last <- c(last, next_log)
}
typeof(last[1])
for (i in 1:4) {
next_log <- unlist(last[i]) + prognoza_zwrotow[i]
last <- c(last, next_log)
}
prognoza_cen <- exp(last)
last
unlist(last)
prognoza_cen <- exp(unlist(last))
prognoza_cen
prognoza_zwrotow
for (i in 1:4) {
next_log <- unlist(last[i]) * prognoza_zwrotow[i]
last <- c(last, next_log)
}
prognoza_cen <- exp(unlist(last))
prognoza_cen
prognoza_zwrotow <- forecast(model,4)$mean
last <- c(log(dane[nrow(dane), 2]))
for (i in 1:4) {
next_log <- unlist(last[i]) * prognoza_zwrotow[i]
last <- c(last, next_log)
}
prognoza_cen <- exp(unlist(last))
prognoza_cen
model2 <- auto.arima(ceny)
summary(model2)
model <- auto.arima(stopy)
summary(model)
stopy
prognoza_cen <- forecast(model2,4)$mean
prognoza_cen
prognoza_ceny
prognoza_ceny <- log(head(indeksy,4)[2])
prognoza_ceny
prognoza_cen <- forecast(model2,4)$mean
prognoza_cen
odłożone_stopy <- head(indeksy,5)
odłożone_stopy
prognoza_zwrotow <- forecast(model,4)$mean
prognoza_zwrotow
prognoza_cen
summary(model2)
exp(prognoza_cen)
odłożone_ceny <- log(head(indeksy,4)[2])
odłożone_ceny
prognoza_cen
odłożone_ceny <- head(indeksy,4)[2]
odłożone_ceny
exp(prognoza_cen)
prognoza_cen
exp(prognoza_cen)
odłożone_ceny
odłożone_stopy
odłożone_ceny
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
library("tidyverse")
library("moments")
library("tseries")
library("forecast")
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
odłożone_ceny <- head(indeksy,4)[2]
dt <- c()
for (i in 1:(nrow(dane)-1)) {
dt <- c(dt,as.numeric(st_l(dane[i,2],dane[i+1,2])))
}
stopy <- tails(dt, -4)
tails
stopy <- tail(dt, -4)
indeksy
log(3.7/3.71)
log(3.7/3.79)
indeksy
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
odłożone_ceny <- head(indeksy,4)[2]
dt <- c()
for (i in 1:(nrow(indeksy)-1)) {
dt <- c(dt,as.numeric(st_l(indeksy[i,2],indeksy[i+1,2])))
}
stopy <- tail(dt, -4)
stopy
log(indeksy[2])
ceny <- log(indeksy[2])
indeksy
log(3.7/3.79)
indeksy[1,2]
as.numeric(st_l(indeksy[1,2],indeksy[2,2]))
log(3.7/3.79)
indeksy[2,2]
indeksy
log(3.7/3.71)
as.numeric(st_l(indeksy[1,2],indeksy[2,2]))
log(3.777/2.833)
stopy
dt <- c()
for (i in 1:(nrow(indeksy)-1)) {
dt <- c(dt,as.numeric(st_l(indeksy[i,2],indeksy[i+1,2])))
}
dt
log(3.777/2.833)
log(3.79/3.65)
stopy <- tail(dt, -4)
stopy
log(3.79/3.65)
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
indeksy <- izo[,c(1,5)]
indeksy <- indeksy %>% map_df(rev)
odłożone_ceny <- head(indeksy,4)[2]
dt <- c()
for (i in 1:(nrow(indeksy)-1)) {
dt <- c(dt,as.numeric(st_l(indeksy[i,2],indeksy[i+1,2])))
}
stopy <- tail(dt, -4)
ceny <- log(indeksy[2])
stopy <- tail(dt, -4) %>% map_df(rev)
stopy <- (tail(dt, -4) %>% map_df(rev))
stopy <- stopy  %>% map_df(rev)
indeksy
stopy
stopy <- rev(tail(dt, -4))
stopy
ceny
ceny <- rev(log(indeksy[2]))
ceny
rev(log(indeksy[2]))
log(indeksy[2])
indeksy
as.numeric(log(indeksy[2]))
as.vector(log(indeksy[2]))
rev(as.vector(log(indeksy[2])))
tail(dt, -4)
rev(tail(dt, -4))
as.vector(log(indeksy[2]))
rev(as.vector(log(indeksy[2])))
izo[,c(1,5)]
ceny <- izo[,c(1,5)]
indeksy <- ceny %>% map_df(rev)
odłożone_ceny <- head(indeksy,4)[2]
odłożone_ceny
ceny <- log(ceny[2])
ceny
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
dane <- izo[,c(1,5)]
indeksy <- dane %>% map_df(rev)
dt <- c()
for (i in 1:(nrow(indeksy)-1)) {
dt <- c(dt,as.numeric(st_l(indeksy[i,2],indeksy[i+1,2])))
}
stopy <- rev(tail(dt, -4))
ceny <- log(ceny[2])
izo <- read.csv("izo_d.csv")
#Stopa logarytmiczna
st_l <- function(a,b) {
return(log(a/b))
}
dane <- izo[,c(1,5)]
indeksy <- dane %>% map_df(rev)
dt <- c()
for (i in 1:(nrow(indeksy)-1)) {
dt <- c(dt,as.numeric(st_l(indeksy[i,2],indeksy[i+1,2])))
}
stopy <- rev(tail(dt, -4))
ceny <- log(dane[2])
stopy
dt
indeksy[1,2]
indeksy[2,2]
as.numeric(st_l(indeksy[1,2],indeksy[2,2]))
as.numeric(st_l(indeksy[3,2],indeksy[2,2]))
as.numeric(st_l(indeksy[2,2],indeksy[3,2]))
dt
tail(dt, -4)
rev(tail(dt, -4))
dt
rev(tail(dt, -4))
ceny
dt
head(log(dane[2]), -4)
log(dane[2])
ceny <- head(log(dane[2]), -4)
rev(tail(dt,4))
dt
tail(dt, -4)
head(dt,4)
tail(log(dane[2]), 4)
ceny_oct <- tail(log(dane[2]), 4)
adf.test(stopy)
model <- auto.arima(stopy)
summary(model)
res <- residuals(model)
Box.test(res, type = "Ljung-Box")
jarque.bera.test(res)
qqnorm(res)
prognoza_zwrotow <- forecast(model,4)$mean
prognoza_zwrotow
stopy_oct
stopy_oct <- rev(head(dt,4))
stopy_oct
